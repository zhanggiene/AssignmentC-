// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROPERTY_H_
#define FLATBUFFERS_GENERATED_PROPERTY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Property;
struct PropertyBuilder;

inline const ::flatbuffers::TypeTable *PropertyTypeTable();

enum PropertyType : int8_t {
  PropertyType_StringType = 0,
  PropertyType_IntegerType = 1,
  PropertyType_DoubleType = 2,
  PropertyType_BoolType = 3,
  PropertyType_MIN = PropertyType_StringType,
  PropertyType_MAX = PropertyType_BoolType
};

inline const PropertyType (&EnumValuesPropertyType())[4] {
  static const PropertyType values[] = {
    PropertyType_StringType,
    PropertyType_IntegerType,
    PropertyType_DoubleType,
    PropertyType_BoolType
  };
  return values;
}

inline const char * const *EnumNamesPropertyType() {
  static const char * const names[5] = {
    "StringType",
    "IntegerType",
    "DoubleType",
    "BoolType",
    nullptr
  };
  return names;
}

inline const char *EnumNamePropertyType(PropertyType e) {
  if (::flatbuffers::IsOutRange(e, PropertyType_StringType, PropertyType_BoolType)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPropertyType()[index];
}

struct Property FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropertyBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PropertyTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VALUE = 6,
    VT_TYPE = 8,
    VT_CHILDREN = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  ::flatbuffers::String *mutable_value() {
    return GetPointer<::flatbuffers::String *>(VT_VALUE);
  }
  PropertyType type() const {
    return static_cast<PropertyType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool mutate_type(PropertyType _type = static_cast<PropertyType>(0)) {
    return SetField<int8_t>(VT_TYPE, static_cast<int8_t>(_type), 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Property>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Property>> *>(VT_CHILDREN);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<Property>> *mutable_children() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<Property>> *>(VT_CHILDREN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           verifier.EndTable();
  }
};

struct PropertyBuilder {
  typedef Property Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Property::VT_NAME, name);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Property::VT_VALUE, value);
  }
  void add_type(PropertyType type) {
    fbb_.AddElement<int8_t>(Property::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Property>>> children) {
    fbb_.AddOffset(Property::VT_CHILDREN, children);
  }
  explicit PropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Property> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Property>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Property> CreateProperty(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0,
    PropertyType type = PropertyType_StringType,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Property>>> children = 0) {
  PropertyBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_value(value);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Property> CreatePropertyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *value = nullptr,
    PropertyType type = PropertyType_StringType,
    const std::vector<::flatbuffers::Offset<Property>> *children = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<Property>>(*children) : 0;
  return CreateProperty(
      _fbb,
      name__,
      value__,
      type,
      children__);
}

inline const ::flatbuffers::TypeTable *PropertyTypeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    PropertyTypeTypeTable
  };
  static const char * const names[] = {
    "StringType",
    "IntegerType",
    "DoubleType",
    "BoolType"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *PropertyTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 1, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    PropertyTypeTypeTable,
    PropertyTypeTable
  };
  static const char * const names[] = {
    "name",
    "value",
    "type",
    "children"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const Property *GetProperty(const void *buf) {
  return ::flatbuffers::GetRoot<Property>(buf);
}

inline const Property *GetSizePrefixedProperty(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Property>(buf);
}

inline Property *GetMutableProperty(void *buf) {
  return ::flatbuffers::GetMutableRoot<Property>(buf);
}

inline Property *GetMutableSizePrefixedProperty(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<Property>(buf);
}

inline bool VerifyPropertyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Property>(nullptr);
}

inline bool VerifySizePrefixedPropertyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Property>(nullptr);
}

inline const char *PropertyExtension() {
  return "bfbs";
}

inline void FinishPropertyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Property> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPropertyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Property> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PROPERTY_H_
